#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Registraion")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertRegistraion(Registraion instance);
  partial void UpdateRegistraion(Registraion instance);
  partial void DeleteRegistraion(Registraion instance);
  partial void Insertcountry(country instance);
  partial void Updatecountry(country instance);
  partial void Deletecountry(country instance);
  partial void Insertstate(state instance);
  partial void Updatestate(state instance);
  partial void Deletestate(state instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RegistraionConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Registraion> Registraions
	{
		get
		{
			return this.GetTable<Registraion>();
		}
	}
	
	public System.Data.Linq.Table<country> countries
	{
		get
		{
			return this.GetTable<country>();
		}
	}
	
	public System.Data.Linq.Table<state> states
	{
		get
		{
			return this.GetTable<state>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.deleteregistraion")]
	public int deleteregistraion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegistraionID", DbType="Int")] System.Nullable<int> registraionID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), registraionID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertregistraion")]
	public int insertregistraion([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string firstname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string lastname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string emailid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string mobileno, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string gender, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> country, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> state, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string hobbies, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string images)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firstname, lastname, emailid, mobileno, gender, country, state, hobbies, images);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.updateregistraion")]
	public int updateregistraion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegistraionID", DbType="Int")] System.Nullable<int> registraionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string firstname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string lastname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string emailid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string mobileno, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string gender, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> country, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> state, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string hobbies, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string images)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), registraionID, firstname, lastname, emailid, mobileno, gender, country, state, hobbies, images);
		return ((int)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registraion")]
public partial class Registraion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RegistraionID;
	
	private string _firstname;
	
	private string _lastname;
	
	private string _emailid;
	
	private string _mobileno;
	
	private string _gender;
	
	private System.Nullable<int> _country;
	
	private System.Nullable<int> _state;
	
	private string _hobbies;
	
	private string _images;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistraionIDChanging(int value);
    partial void OnRegistraionIDChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnemailidChanging(string value);
    partial void OnemailidChanged();
    partial void OnmobilenoChanging(string value);
    partial void OnmobilenoChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OncountryChanging(System.Nullable<int> value);
    partial void OncountryChanged();
    partial void OnstateChanging(System.Nullable<int> value);
    partial void OnstateChanged();
    partial void OnhobbiesChanging(string value);
    partial void OnhobbiesChanged();
    partial void OnimagesChanging(string value);
    partial void OnimagesChanged();
    #endregion
	
	public Registraion()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistraionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RegistraionID
	{
		get
		{
			return this._RegistraionID;
		}
		set
		{
			if ((this._RegistraionID != value))
			{
				this.OnRegistraionIDChanging(value);
				this.SendPropertyChanging();
				this._RegistraionID = value;
				this.SendPropertyChanged("RegistraionID");
				this.OnRegistraionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(50)")]
	public string firstname
	{
		get
		{
			return this._firstname;
		}
		set
		{
			if ((this._firstname != value))
			{
				this.OnfirstnameChanging(value);
				this.SendPropertyChanging();
				this._firstname = value;
				this.SendPropertyChanged("firstname");
				this.OnfirstnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(50)")]
	public string lastname
	{
		get
		{
			return this._lastname;
		}
		set
		{
			if ((this._lastname != value))
			{
				this.OnlastnameChanging(value);
				this.SendPropertyChanging();
				this._lastname = value;
				this.SendPropertyChanged("lastname");
				this.OnlastnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailid", DbType="VarChar(30)")]
	public string emailid
	{
		get
		{
			return this._emailid;
		}
		set
		{
			if ((this._emailid != value))
			{
				this.OnemailidChanging(value);
				this.SendPropertyChanging();
				this._emailid = value;
				this.SendPropertyChanged("emailid");
				this.OnemailidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobileno", DbType="VarChar(20)")]
	public string mobileno
	{
		get
		{
			return this._mobileno;
		}
		set
		{
			if ((this._mobileno != value))
			{
				this.OnmobilenoChanging(value);
				this.SendPropertyChanging();
				this._mobileno = value;
				this.SendPropertyChanged("mobileno");
				this.OnmobilenoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(10)")]
	public string gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this.OngenderChanging(value);
				this.SendPropertyChanging();
				this._gender = value;
				this.SendPropertyChanged("gender");
				this.OngenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="Int")]
	public System.Nullable<int> country
	{
		get
		{
			return this._country;
		}
		set
		{
			if ((this._country != value))
			{
				this.OncountryChanging(value);
				this.SendPropertyChanging();
				this._country = value;
				this.SendPropertyChanged("country");
				this.OncountryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="Int")]
	public System.Nullable<int> state
	{
		get
		{
			return this._state;
		}
		set
		{
			if ((this._state != value))
			{
				this.OnstateChanging(value);
				this.SendPropertyChanging();
				this._state = value;
				this.SendPropertyChanged("state");
				this.OnstateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hobbies", DbType="VarChar(20)")]
	public string hobbies
	{
		get
		{
			return this._hobbies;
		}
		set
		{
			if ((this._hobbies != value))
			{
				this.OnhobbiesChanging(value);
				this.SendPropertyChanging();
				this._hobbies = value;
				this.SendPropertyChanged("hobbies");
				this.OnhobbiesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="VarChar(MAX)")]
	public string images
	{
		get
		{
			return this._images;
		}
		set
		{
			if ((this._images != value))
			{
				this.OnimagesChanging(value);
				this.SendPropertyChanging();
				this._images = value;
				this.SendPropertyChanged("images");
				this.OnimagesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.country")]
public partial class country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _countryid;
	
	private string _countryname;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryidChanging(int value);
    partial void OncountryidChanged();
    partial void OncountrynameChanging(string value);
    partial void OncountrynameChanged();
    #endregion
	
	public country()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int countryid
	{
		get
		{
			return this._countryid;
		}
		set
		{
			if ((this._countryid != value))
			{
				this.OncountryidChanging(value);
				this.SendPropertyChanging();
				this._countryid = value;
				this.SendPropertyChanged("countryid");
				this.OncountryidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryname", DbType="VarChar(50)")]
	public string countryname
	{
		get
		{
			return this._countryname;
		}
		set
		{
			if ((this._countryname != value))
			{
				this.OncountrynameChanging(value);
				this.SendPropertyChanging();
				this._countryname = value;
				this.SendPropertyChanged("countryname");
				this.OncountrynameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.state")]
public partial class state : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _stateid;
	
	private string _statename;
	
	private System.Nullable<int> _countryid;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstateidChanging(int value);
    partial void OnstateidChanged();
    partial void OnstatenameChanging(string value);
    partial void OnstatenameChanged();
    partial void OncountryidChanging(System.Nullable<int> value);
    partial void OncountryidChanged();
    #endregion
	
	public state()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int stateid
	{
		get
		{
			return this._stateid;
		}
		set
		{
			if ((this._stateid != value))
			{
				this.OnstateidChanging(value);
				this.SendPropertyChanging();
				this._stateid = value;
				this.SendPropertyChanged("stateid");
				this.OnstateidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statename", DbType="VarChar(50)")]
	public string statename
	{
		get
		{
			return this._statename;
		}
		set
		{
			if ((this._statename != value))
			{
				this.OnstatenameChanging(value);
				this.SendPropertyChanging();
				this._statename = value;
				this.SendPropertyChanged("statename");
				this.OnstatenameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryid", DbType="Int")]
	public System.Nullable<int> countryid
	{
		get
		{
			return this._countryid;
		}
		set
		{
			if ((this._countryid != value))
			{
				this.OncountryidChanging(value);
				this.SendPropertyChanging();
				this._countryid = value;
				this.SendPropertyChanged("countryid");
				this.OncountryidChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
